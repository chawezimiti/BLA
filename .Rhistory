sigh<-c(0.3,0.4,0.5,0.7,0.8,0.9,1,1.1)
ble_profile(data=vals, start=start, sigh=sigh, model = "trapezium")
cbvn(data=vals, start = start, sigh=0.4, model = "trapezium",
optim.method =  "BFGS",
xlab=expression("Phosphorus/ mg L"^-1),
ylab=expression("Yield/ t ha"^-1),
pch=16, col="grey")
start<-list(
c(4.3,3.4,13.8,32.8,-4.9,mean(x),mean(y),sd(x),sd(y),cor(x,y)),
c(2.5,4.1,13.42,32,-4.8,mean(x),mean(y),sd(x),sd(y),cor(x,y)),
c(3.5,3.7,13.35,47.7,-8.4,mean(x),mean(y),sd(x),sd(y),cor(x,y)),
c(2.83,4.11,13.7,32.,-4.6,mean(x),mean(y),sd(x),sd(y),cor(x,y)),
c(4.3,3.4,13.59,28,-3.6,mean(x),mean(y),sd(x),sd(y),cor(x,y))
)
models <- lapply(start, function(start) {
m <- tryCatch(cbvn(data=vals, start = start, sigh=0.4, model = "trapezium",
optim.method =  "BFGS",
xlab=expression("Phosphorus/ mg L"^-1),
ylab=expression("Yield/ t ha"^-1),
pch=16, col="grey"),
error=function(e) NA)
return(m)
})
model_1 <- models[[which.min(unlist(lapply(X=models,FUN = function(a){
b<-tryCatch(a$AIC[2,1],error=function(e) NA)
return(b)})))]]
model_1
P_data <-log(soil$P) # extracting soil P from the data
P_data[which(is.na(P_data)==T)]<-mean(P_data,na.rm=T) # replacing missing values with the mean value
P<-predictBL(model_1,P_data) # boundary yield for soil P
points(P_data, P, col="red", pch=16)
summastat(soil$pH) # can not be assumed to be from normal distribution
summastat(log(soil$pH)) # can not be assumed to be from normal distribution
model_bc <- lm(soil$pH ~ 1)
# Simplified approach: Use boxcox function directly on the numeric vector
bcox<- MASS::boxcox(model_bc, plotit = TRUE)
maxlik<-max(bcox$y)
lambda<-bcox$x[which(bcox$y==maxlik)]
print(lambda)
## Define the Box-Cox transformation function
box_cox_transform <- function(data, lambda) {
if (lambda == 0) {
log(data)
} else {
(data^lambda - 1) / lambda
}
}
pH_bc <- box_cox_transform(soil$pH, lambda)
summastat(pH_bc) # can not be assumed to be from normal distribution
yj <- yeojohnson(soil$pH)
pH_yj <- yj$x.t
summastat(pH_yj) # can be assumed to be from normal distribution
dat2<-data.frame(pH_yj,soil$yield)
bag<-bagplot(dat2, show.whiskers = F)
vals2<-rbind(bag$pxy.bag,bag$pxy.outer) # new excludes bivariate outliers
x<-vals2[,1]
y<-vals2[,2]
expl_boundary(x,y,10,10, method = "Perimeter") # there is evidence of bounding structures
plot(vals2[,1],vals2[,2], pch=16, col="grey") # a linear model is appropriate
start<-list(
c(20,4.3,13.57,mean(x),mean(y),sd(x),sd(y),cor(x,y)),
c(21.3,5.4,13.44,mean(x),mean(y),sd(x),sd(y),cor(x,y)),
c(20.9,5.2,13.57,mean(x),mean(y),sd(x),sd(y),cor(x,y)),
c(18.47,3.54,13.87,mean(x),mean(y),sd(x),sd(y),cor(x,y)),
c(20.7,4.5,13.67,mean(x),mean(y),sd(x),sd(y),cor(x,y))
)
models2 <- lapply(start, function(start) {
m <- tryCatch(cbvn(vals2, start = start, sigh=0.4, model = "lp",
xlab=expression("pH/tranformed YeoJohnson"),
ylab=expression("Yield/ t ha"^-1),
pch=16, col="grey"),
error=function(e) NA)
return(m)
})
model_2 <- models2[[which.min(unlist(lapply(X=models2,FUN = function(a){
b<-tryCatch(a$AIC[2,1],error=function(e) NA)
return(b)})))]]
model_2
pH_data<- yeojohnson(soil$pH)$x.t # extracting soil pH from data and transforming it
pH_data[which(is.na(pH_data)==T)]<-mean(pH_data,na.rm=T)#replacing missing values with mean
pH<-predictBL(model_2,pH_data) # predicting boundary yield
points(pH_data, pH, col="red", pch=16)
plot(vals[,1],vals[,2], xlab=expression("Phosphorus/ln(mg kg"^-1*")"),
ylab="yield/ t ha", pch=16, col="16")
xa<-seq(min(vals[,1]),max(vals[,1]),length.out =1000) #values of soil P to predict yield
ya<-numeric() # empty vector to contain predicted boundary yield values
for(i in 1: length(xa)){ # predicting boundary yield values
ya[i]<-min(model_1$Parameters[1,1]+model_1$Parameters[2,1]*xa[i]
,model_1$Parameters[3,1],
model_1$Parameters[4,1]+model_1$Parameters[5,1]*xa[i])
}
lines(xa,ya, col="red", lwd=1.5) # adding the boundary values for each soil P value
crit_P<-(model_1$Parameters[3,1]-model_1$Parameters[1,1])/model_1$Parameters[2,1]
abline(v=crit_P, col="red", lty=5) # adding critical soil P to plot
params <- mvrnorm(n = 100000,mu = model_1$Parameters[1:3,1], Sigma = solve(model_1$Hessian[1:3,1:3]))
crit_points<-(params[,3]-params[,1])/params[,2]
CI_95 <- quantile(crit_points, c(0.025,0.975))
abline(v=CI_95, col="blue", lty=1, lwd=1.5)
P_limProb<-pnorm(P_data, mean = mean(crit_points), sd = sd(crit_points))
head(P_limProb)
plot(exp(vals[,1]),vals[,2], xlab=expression(bold("Phosphorus/ mg kg"^-1)),
ylab=expression(bold("Yield/ t ha"^-1)), col="grey", pch=16, xlim=c(0,120),
font.axis = 2)
lines(exp(xa),ya, col="red", lwd=1.5)
abline(v=exp(crit_P), col="red")
CI_95 <- exp(quantile(crit_points, c(0.025,0.975)))
polygon(c(CI_95[1],CI_95[2],CI_95[2],CI_95[1],CI_95[1]), c(0,0,18,18,0),
col=adjustcolor( "red", alpha.f = 0.2),border=NA)
legend("bottomright", legend = c("Boundary line", "95% CI"),
lty = c(1,NA), pch = c(NA,15), lwd = c(1.5, NA),
col = c("red",col=adjustcolor( "red", alpha.f = 0.2) ))
plot(vals2[,1],vals2[,2], xlab="pH", ylab=expression("Yield/ t ha"^-1),
col="grey", pch=16) # ploting soil pH vs yield
xc<-seq(min(vals2[,1]), max(vals2[,1]),length.out =1000)# values of soil pH to be predicted
yc<-numeric() # vector for predicted boundary yield values
for(i in 1: length(xc)){ # predicting boundary yield values
yc[i]<-min(model_2$Parameters[1,1]+model_2$Parameters[2,1]*xc[i]
,model_2$Parameters[3,1])
}
lines(xc,yc, col="red", lwd=1.5) # adding the boundary yield values to plot
crit_ph<-(model_2$Parameters[3,1]-model_2$Parameters[1,1])/model_2$Parameters[2,1]
abline(v=crit_ph, col="red", lty=5) # adding to plot
params3 <- mvrnorm(n = 100000,mu = model_2$Parameters[1:3,1], Sigma = solve(model_2$Hessian[1:3,1:3]))
Hessian<- model_2$Hessian[1:3,1:3]
# Compute the covariance matrix as the inverse of the positive definite matrix
cov_matrix <- solve(Hessian)
params3 <- mvrnorm(n = 100000,mu = model_2$Parameters[1:3,1], Sigma = cov_matrix)#
crit_points3<-(params3[,3]-params3[,1])/params3[,2] # critical points
CI_95ph<-quantile(crit_points3, c(0.025,0.975)) # 95% confidence interval
abline(v=CI_95ph, col="blue", lty=1, lwd=1.5)
polygon(c(CI_95ph[1],CI_95ph[2],CI_95ph[2],CI_95ph[1],CI_95ph[1]), c(0,0,18,18,0),
col=adjustcolor( "red", alpha.f = 0.2),border=NA)
pH_limProb<-pnorm(pH_data, mean = mean(crit_points3), sd = sd(crit_points3))
head(pH_limProb)
x2 <- predict(yj, newdata = vals2[,1], inverse = TRUE)# back-transforming the pH data
plot(x2,vals2[,2], xlab=expression(bold("pH")),
ylab=expression(bold("Yield/ t ha"^-1)), col="grey",
pch=16)
xc2 <- predict(yj, newdata = xc, inverse = TRUE)# back-transforming the pH data
lines(xc2,yc, col="red", lwd=1.5) # boundary line
abline(v=predict(yj, newdata = crit_ph, inverse = TRUE), col="red") # critical pH
CI_95 <- predict(yj, newdata = quantile(crit_points3, c(0.025,0.975)), inverse = TRUE)# back-transforming CI
polygon(c(CI_95[1],CI_95[2],CI_95[2],CI_95[1],CI_95[1]), c(0,0,18,18,0),
col=adjustcolor( "red", alpha.f = 0.2),border=NA) # the confidence interval on plot
legend("bottomright", legend = c("Boundary line", "95% CI"),
lty = c(1,NA), pch = c(NA,15), lwd = c(1.5, NA),
col = c("red",col=adjustcolor( "red", alpha.f = 0.2) ))
yieldlim0<-limfactor(P,pH)
yieldlim<-yieldlim0[[1]]
yieldlim$P_limProb<-P_limProb
yieldlim$pH_limProb<-pH_limProb
head(yieldlim)
props<- prop.table(table(yieldlim$Lim_factor))
pie(props, main="",
labels = paste(names(props), "\n",scales::percent(as.vector(unname(props)))),
cex = 0.8,col = gray(seq(0.4, 1.0, length.out = 6)))
devtools::load_all(".")
library(MASS)
library(bestNormalize) # For data transformation i.e Yeo_Johnson method
library(aplpack)       # For determining bivariate outliers
library(HDInterval)    # For determining the High Density Interval
yj <- yeojohnson(soil$pH)
pH_yj <- yj$x.t
summastat(pH_yj)# transformed pH can be assumed to be from normal distribution as O.skewness is within [-0.2,0.2]
dat2<-data.frame(pH_yj,soil$yield)# Input for bagplot() is a dataframe of x and y.
bag<-bagplot(dat2, show.whiskers = F)
legend("bottomright", legend = c("Bag","Loop", "depth median","outlier"), pch = c(15,15,8,3),
col = c(adjustcolor( "blue", alpha.f = 0.7),
"lightblue","red","red" ))
vals2<-rbind(bag$pxy.bag,bag$pxy.outer)
x<-vals2[,1]
y<-vals2[,2]
expl_boundary(x,y,10,100, method = "Perimeter")
devtools::load_all(".")
expl_boundary(x,y,10,100, method = "Perimeter")
expl_boundary(x,y,10,100, method = "Area")
expl_boundary(x,y,10,1000, method = "Area")
expl_boundary(x,y,10,1000, method = "Perimeter")
devtools::load_all(".")
devtools::load_all(".")
expl_boundary(x,y,10,100, method = "Perimeter")
devtools::load_all(".")
expl_boundary(x,y,10,100, method = "Perimeter")
devtools::load_all(".")
expl_boundary(x,y,10,100, method = "Perimeter")
dat<-data.frame(x=log(soil$P), y=soil$yield) #Input for bagplot is a dataframe of x and y.
bag<-bagplot(dat,show.whiskers = F)
legend("bottomright", legend = c("Bag","Loop","Depth median", "outlier"),
pch = c(15,15,8,3), col = c(adjustcolor( "blue", alpha.f = 0.7),
"lightblue","red","red"))
vals<-rbind(bag$pxy.bag,bag$pxy.outer)
x<-vals[,1]
y<-vals[,2]
expl_boundary(x,y,shells=10,simulations=1000, method = "Perimeter")
expl_boundary(x,y,shells=10,simulations=1000, method = "Area")
devtools::load_all(".")
expl_boundary(x,y,shells=10,simulations=100, method = "Area")
expl_boundary(x,y,shells=10,simulations=100, method = "Perimeter")
devtools::load_all(".")
expl_boundary(x,y,shells=10,simulations=100, method = "Area")
devtools::load_all(".")
expl_boundary(x,y,shells=10,simulations=1000, method = "Perimeter")
expl_boundary(x,y,shells=10,simulations=1000, method = "Perimeter")
yj <- yeojohnson(soil$pH)
pH_yj <- yj$x.t
summastat(pH_yj)# transformed pH can be assumed to be from normal distribution as O.skewness is within [-0.2,0.2]
dat2<-data.frame(pH_yj,soil$yield)# Input for bagplot() is a dataframe of x and y.
bag<-bagplot(dat2, show.whiskers = F)
legend("bottomright", legend = c("Bag","Loop", "depth median","outlier"), pch = c(15,15,8,3),
col = c(adjustcolor( "blue", alpha.f = 0.7),
"lightblue","red","red" ))
vals2<-rbind(bag$pxy.bag,bag$pxy.outer)
x<-vals2[,1]
y<-vals2[,2]
expl_boundary(x,y,10,1000, method = "Perimeter")
devtools::load_all(".")
library(MASS)
library(bestNormalize) # For data transformation i.e Yeo_Johnson method
library(aplpack)       # For determining bivariate outliers
library(HDInterval)    # For determining the High Density Interval
summastat(soil$P) # From results, P can not be assumed to be from a normal distribution
summastat(log(soil$P))#The log-transformed P can be assumed to be from a normal distribution
dat<-data.frame(x=log(soil$P), y=soil$yield) #Input for bagplot is a dataframe of x and y.
bag<-bagplot(dat,show.whiskers = F)
legend("bottomright", legend = c("Bag","Loop","Depth median", "outlier"),
pch = c(15,15,8,3), col = c(adjustcolor( "blue", alpha.f = 0.7),
"lightblue","red","red"))
vals<-rbind(bag$pxy.bag,bag$pxy.outer)
x<-vals[,1]
y<-vals[,2]
expl_boundary(x,y,shells=10,simulations=100, method = "Area")
expl_boundary(x,y,shells=10,simulations=1000, method = "Area")
expl_boundary(x,y,shells=10,simulations=1000, method = "Perimeter")
yj <- yeojohnson(soil$pH)
pH_yj <- yj$x.t
summastat(pH_yj)# transformed pH can be assumed to be from normal distribution as O.skewness is within [-0.2,0.2]
dat2<-data.frame(pH_yj,soil$yield)# Input for bagplot() is a dataframe of x and y.
bag<-bagplot(dat2, show.whiskers = F)
legend("bottomright", legend = c("Bag","Loop", "depth median","outlier"), pch = c(15,15,8,3),
col = c(adjustcolor( "blue", alpha.f = 0.7),
"lightblue","red","red" ))
vals2<-rbind(bag$pxy.bag,bag$pxy.outer)
x<-vals2[,1]
y<-vals2[,2]
expl_boundary(x,y,10,1000, method = "Perimeter")
expl_boundary(x,y,10,1000, method = "Area")
devtools::load_all(".")
expl_boundary(x,y,10,1000, method = "Perimeter")
devtools::load_all(".")
expl_boundary(x,y,10,1000, method = "Perimeter")
devtools::load_all(".")
devtools::load_all(".")
expl_boundary(x,y,10,1000, method = "Perimeter")
expl_boundary(x,y,10,1000, method = "Area")
devtools::load_all(".")
x<-vals2[,1]
y<-vals2[,2]
expl_boundary(x,y,10,1000, method = "Area")
expl_boundary(x,y,10,1000, method = "Perimeter")
x<-vals[,1]
y<-vals[,2]
expl_boundary(x,y,shells=10,simulations=1000, method = "Perimeter")
expl_boundary(x,y,shells=10,simulations=1000, method = "Area")
devtools::load_all(".")
expl_boundary(x,y,shells=10,simulations=1000, method = "Area")
expl_boundary(x,y,shells=10,simulations=1000, method = "Perimeter")
x<-vals2[,1]
y<-vals2[,2]
expl_boundary(x,y,10,1000, method = "Perimeter")
setwd("C:/Users/stxcm28/OneDrive - The University of Nottingham/PhD_works_2022/Nottingham PhD/PhD works/Papers_development/Paper 3_evidence of boundary line/Analysis folder")
################# 1. Evapotranspiration data ##################################
###############################################################################
data<-read.csv("data.csv")
nrow(data)
names(data)
######
outliers<-bagplot(data$ET..mm.,data$Yield..t.ha.,na.rm = T,show.whiskers=FALSE,
xlab="Evapotranspiration (mm/hr)",ylab = "Yield (kg/ha)",
main="Bagplot for Yield as function of Evapotranspiration")$pxy.outlier
legend("topright",legend=c("depth Median","bag","loop","outliers"),
pch=c(8,15,15,3),col = c("red","steelblue3","lightblue","red"))
x<-outliers[,1,drop=T]
y<-outliers[,2,drop=T]
z<-numeric()
for(i in which(x==x)){
z[i]<-which(data$ET..mm.==x[i] & data$Yield..t.ha.==y[i])
data2<-data[-z,]
}
x<-data2$ET..mm.
y<-data2$Yield..t.ha.
#peel_plot_spilt(x,y,xlab=xlab,ylab=ylab,leg_position="bottomright")
expl_boundary(x,y,10,1000)
#peel_plot_spilt(x,y,xlab=xlab,ylab=ylab,leg_position="bottomright")
expl_boundary(x,y,10,1000, method = "Area")
########################### 3.Potassium data ########################
#####################################################################
data<-read.table("2016.dat",head=TRUE)
nrow(data)
head(data)
dim(data)
data<-data[-which(data$k_ppm==0),]
names(data)
summa(data$k_ppm)
summa(data$yield_mean)
outliers<-bagplot(log(data$k_ppm),data$yield_mean,na.rm = TRUE,show.whiskers=FALSE,
xlab="Potassium /ln (mg/L)",ylab = "Yield (kg/ha)") $pxy.outlier
)
outliers<-bagplot(log(data$k_ppm),data$yield_mean,na.rm = TRUE,show.whiskers=FALSE,
xlab="Potassium /ln (mg/L)",ylab = "Yield (kg/ha)")
#main="Bagplot for Yield as function of Potassium fertilisation")
legend("topright",legend=c("depth Median","bag","loop","outliers"),
pch=c(8,15,15,3),col = c("red","steelblue3","lightblue","red"))
x<-outliers[,1,drop=T]
y<-outliers[,2,drop=T]
z<-numeric()
outliers
x<-outliers[,1,drop=T]
############################## 5. Beans data ##################################
###############################################################################
data<-read.table("Beans2003_12346.txt",header=TRUE)
nrow(data)
head(data)
names(data)
dim(data)
plot(data)
plot(log(data$moisture),log(data$conductance))
######
outliers<-bagplot(log(data$moisture),log(data$conductance),na.rm = T,show.whiskers=FALSE,
xlab="moisture/%",ylab=expression("conductance/ln(mmol"*'m'^-2*'s'^-1*')'))$pxy.outlier
legend("topright",legend=c("depth Median","bag","loop","outliers"),
pch=c(8,15,15,3),col = c("red","steelblue3","lightblue","red"))
x<-outliers[,1,drop=T]
y<-outliers[,2,drop=T]
z<-numeric()
for(i in which(x==x)){
z[i]<-which(log(data$moisture)==x[i] & log(data$conductance)==y[i])
data2<-data[-z,]
}
#####
x<-log(data2$moisture)
y<-log(data2$conductance)
xlab = expression("Volumetric soil water content/ln(%)")
ylab = expression("Conductance/ln(mmol"*''*'m'^-2*'s'^-1*')')
#peel_plot_spilt(x,y,xlab=xlab,ylab=ylab,leg_position="bottomright")
peel_plot_spilt(x,y,xlab=xlab,ylab=ylab, cex.lab=1.3)
expl_boundary(x,y,10,1000, method = "Area")
############################ 6. Soil organic carbon data ####################
#############################################################################
data<-read.csv("SOC_Clay.csv",header=TRUE)
nrow(data)
head(data)
names(data)
data<-data[-which(data$SOC>1.7),]
names(data)
plot(log(data$Clay),-1*data$SOC)
######
outliers<-bagplot(log(data$Clay),data$SOC,na.rm = T,show.whiskers=FALSE,
xlab="Clay(%)",ylab = "SOC(kg/ha)",
main="Bagplot for SOC as function of Clay content")$pxy.outlier
legend("topright",legend=c("depth Median","bag","loop","outliers"),
pch=c(8,15,15,3),col = c("red","steelblue3","lightblue","red"))
x<-log(data$Clay)
y<-data$SOC
y<-y*-1
xlab = expression("Clay content/ln(%)")
ylab = expression("Inv-SOC")
expl_boundary(x,y,10,1000, method="Area")
data<-read.table("Tillers20045.txt",header=TRUE)
head(data)
dim(data)
plot(data)
######
outliers<-bagplot(data$Tillers_m.2,data$Yield_.Mg_ha.1.,na.rm = T,show.whiskers=FALSE,
xlab = expression("Tillers/m"^-2),
ylab = expression("yield/Mg ha"^-1),
main="Bagplot for Yield as function of tillers")$pxy.outlier
legend("topright",legend=c("depth Median","bag","loop","outliers"),
pch=c(8,15,15,3),col = c("red","steelblue3","lightblue","red"))
x<-outliers[,1,drop=T]
y<-outliers[,2,drop=T]
z<-numeric()
for(i in which(x==x)){
z[i]<-which(data$Tillers_m.2==x[i] & data$Yield_.Mg_ha.1.==y[i])
data2<-data[-z,]
}
#####
x<-data2$Tillers_m.2
y<-data2$Yield_.Mg_ha.1.
xlab = expression("Tillers/m"^-2)
ylab = expression("yield/Mg ha"^-1)
expl_boundary(x,y,10,1000, method="Area")
############################## 9. Wheat data ##################################
###############################################################################
data<-read.table("wheat_data.txt",header=TRUE)
nrow(data)
head(data)
dim(data)
names(data)
summa(log(data$vwc))
summa(data$conductance)
#transforming to logit
vmc_t<-log((data$vwc)/(100-data$vwc))
hist(vmc_t)
########
hist(data$vwc)
hist(log(data$conductance))
plot(vmc_t,log(data$conductance))
######
outliers<-bagplot(log(data$vwc),log(data$conductance),na.rm = T,show.whiskers=FALSE,
xlab = expression("moisture/%"),
ylab = expression("conductance/log(mmol"*'  '*'m'^-2*'s'^-1*')'),
main="Bagplot for Yield as function of soil water content")$pxy.outlier
legend("topright",legend=c("depth Median","bag","loop","outliers"),
pch=c(8,15,15,3),col = c("red","steelblue3","lightblue","red"))
x<-outliers[,1,drop=T]
y<-outliers[,2,drop=T]
z<-numeric()
for(i in which(x==x)){
z[i]<-which(log(data$vwc)==x[i] & log(data$conductance)==y[i])
data2<-data[-z,]
}
#x<-data2$vwc
#x<-log((data2$vwc)/(100-data2$vwc))
x<-log(data2$vwc)
y<-log(data2$conductance)
#peel_function_spilt(x,log(y),10,1000)
xlab = expression("Volumetric soil water content/ln(%)")
ylab = expression("Conductance/log(mmol"*'  '*'m'^-2*'s'^-1*')')
par(mar=c(5.1,5,4.1,2.1))
expl_boundary(x,y,10,1000,method="Area")
setwd("C:/Users/stxcm28/OneDrive - The University of Nottingham/PhD_works_2022/Nottingham PhD/PhD works/Papers_development/Paper 3_evidence of boundary line/Analysis folder")
devtools::load_all("C:/Users/stxcm28/OneDrive - The University of Nottingham/Desktop/BLA")
library(aplpack)
############################## 5. Beans data ##################################
###############################################################################
data<-read.table("Beans2003_12346.txt",header=TRUE)
names(data)
head(data)
nrow(data)
dim(data)
plot(data)
plot(log(data$moisture),log(data$conductance))
######
outliers<-bagplot(log(data$moisture),log(data$conductance),na.rm = T,show.whiskers=FALSE,
xlab="moisture/%",ylab=expression("conductance/ln(mmol"*'m'^-2*'s'^-1*')'))$pxy.outlier
legend("topright",legend=c("depth Median","bag","loop","outliers"),
pch=c(8,15,15,3),col = c("red","steelblue3","lightblue","red"))
x<-outliers[,1,drop=T]
y<-outliers[,2,drop=T]
z<-numeric()
for(i in which(x==x)){
z[i]<-which(log(data$moisture)==x[i] & log(data$conductance)==y[i])
data2<-data[-z,]
}
#####
x<-log(data2$moisture)
y<-log(data2$conductance)
xlab = expression("Volumetric soil water content/ln(%)")
ylab = expression("Conductance/ln(mmol"*''*'m'^-2*'s'^-1*')')
expl_boundary(x,y,10,1000, method = "Area")
x<-data2$moisture
y<-log(data2$conductance)
xlab = expression("Volumetric soil water content/ln(%)")
ylab = expression("Conductance/ln(mmol"*''*'m'^-2*'s'^-1*')')
expl_boundary(x,y,10,1000, method = "Area")
data<-read.table("veg3.txt",header=TRUE)
head(data)
plot(data)
######
outliers<-bagplot(data$local_optimum_N_rate,data$vegetation_Index,na.rm = T,show.whiskers=FALSE,
xlab = expression("Local optimum Nitrogen rate/kg ha"^-1),
ylab = expression("Vegetation Index/NDVI" ),
main="Bagplot for NDVI as function of Nitogen fertilisation")$pxy.outlier
legend("topright",legend=c("depth Median","bag","loop","outliers"),
pch=c(8,15,15,3),col = c("red","steelblue3","lightblue","red"))
x<-data$local_optimum_N_rate
y<-data$vegetation_Index
xlab = expression("Local optimum Nitrogen rate/kg ha"^-1)
ylab = expression("Vegetation Index/NDVI" )
expl_boundary(x,y,10,1000, method="Area")
data<-read.table("NDVIMay15.txt",header=TRUE)
nrow(data)
head(data)
names(data)
summa(data$NDVI)
summa(data$Yield_TperHa)
plot(log(data$NDVI),log(data$Yield_TperHa))
######
outliers<-bagplot(data$NDVI,log(data$Yield_TperHa),na.rm = T,show.whiskers=FALSE,
xlab = expression("NDVI"),
ylab = expression("Local asymptotic yield/t ha"^-1),
main="Bagplot for Local asymptotic yield as function of NDVI")$pxy.outlier
legend("topright",legend=c("depth Median","bag","loop","outliers"),
pch=c(8,15,15,3),col = c("red","steelblue3","lightblue","red"))
x<-data$NDVI
y<-data$Yield_TperHa
xlab = expression("NDVI")
ylab = expression("Local asymptotic yield/t ha"^-1)
expl_boundary(x,log(y),10,1000, method = "Area")
devtools::load_all("C:/Users/stxcm28/OneDrive - The University of Nottingham/Desktop/BLA")
dat<-data.frame(x=log(soil$P), y=soil$yield) #Input for bagplot is a dataframe of x and y.
bag<-bagplot(dat,show.whiskers = F)
legend("bottomright", legend = c("Bag","Loop","Depth median", "outlier"),
pch = c(15,15,8,3), col = c(adjustcolor( "blue", alpha.f = 0.7),
"lightblue","red","red"))
vals<-rbind(bag$pxy.bag,bag$pxy.outer)
x<-vals[,1]
y<-vals[,2]
expl_boundary(x,y,shells=10,simulations=10, method = "Perimeter")
devtools::load_all("C:/Users/stxcm28/OneDrive - The University of Nottingham/Desktop/BLA")
expl_boundary(x,y,shells=10,simulations=10, method = "Perimeter")
devtools::load_all("C:/Users/stxcm28/OneDrive - The University of Nottingham/Desktop/BLA")
