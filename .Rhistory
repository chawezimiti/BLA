beef<-function(x,a,b,c){
return(min(beta0,beta1+beta2*x))
}
vals<-data.frame(x,y)
theta2<-c(4.75, 3.23, 13.3, mean(x), mean(y), sd(x) , sd(y), cor(x,y))
cbvn(vals, equation=beef, theta=theta2, mode="trapezium", sigh=0.7)
cbvn(vals, equation=beef, theta=theta2, mode="other", sigh=0.7)
cbvn(vals, equation=beef, theta=theta2, mode="other", sigh=0.7)
cbvn(vals, equation=beef, theta=theta2, model="other", sigh=0.7)
cbvn(vals, equation=beef, theta=theta2, model="other", sigh=0.7)
theta2
devtools::load_all(".")
theta2<-c(4.75, 3.23, 13.3, mean(x), mean(y), sd(x) , sd(y), cor(x,y))
cbvn(vals, equation=beef, theta=theta2, model="other", sigh=0.7)
beef<-function(x,a,b,c){
return(min(a,b+c*x))
}
vals<-data.frame(x,y)
theta2<-c(13.3, 4.75, 3.23, mean(x), mean(y), sd(x) , sd(y), cor(x,y))
cbvn(vals, equation=beef, theta=theta2, model="other", sigh=0.7)
match.fun(beef)
devtools::load_all(".")
beef2<-function(x,a,b,c,d,e){
return(min(a,b+c*x,d+e*x))
}
vals<-data.frame(x,y)
theta2<-c(13.3, 4.75, 3.23, 24.87,-2.95, mean(x), mean(y), sd(x) , sd(y), cor(x,y))
cbvn(vals, equation=beef2, theta=theta2, model="other", sigh=0.7)
devtools::load_all(".")
beef2<-function(x,a,b,c,d,e){
return(min(a,b+c*x,d+e*x))
}
vals<-data.frame(x,y)
theta2<-c(13.3, 4.75, 3.23, 24.87,-2.95, mean(x), mean(y), sd(x) , sd(y), cor(x,y))
cbvn(vals, equation=beef2, theta=theta2, model="other", sigh=0.7)
devtools::load_all(".")
beef2<-function(x,a,b,c,d,e){
return(min(a,b+c*x,d+e*x))
}
vals<-data.frame(x,y)
theta2<-c(13.3, 4.75, 3.23, 24.87,-2.95, mean(x), mean(y), sd(x) , sd(y), cor(x,y))
cbvn(vals, equation=beef2, theta=theta2, model="other", sigh=0.7)
# Custom 3 parameter function
beef<-function(x,a,b,c){
return(min(a,b+c*x))
}
vals<-data.frame(x,y)
theta2<-c(13.3, 4.75, 3.23, mean(x), mean(y), sd(x) , sd(y), cor(x,y))
cbvn(vals, equation=beef, theta=theta2, model="other", sigh=0.7)
vals<-data.frame(x,y)
theta2<-c(13.3, 4.75, 3.23, 24.87,-2.95, mean(x), mean(y), sd(x) , sd(y), cor(x,y))
cbvn(vals, equation=beef2, theta=theta2, model="other", sigh=0.7)
mean(x)
mean(y)
sd(x)
sd(y)
devtools::load_all(".")
beef2<-function(x,a,b,c,d,e){
return(min(a,b+c*x,d+e*x))
}
vals<-data.frame(x,y)
theta2<-c(13.3, 4.75, 3.23, 24.87,-2.95, mean(x), mean(y), sd(x) , sd(y), cor(x,y))
cbvn(vals, equation=beef2, theta=theta2, model="other", sigh=0.7)
huck<-function(x){}
beef2<-function(x,a,b,c,d,e){
return(min(a,b+c*x,d+e*x))
}
nack<-beef2
beef2
devtools::load_all(".")
x<-soil$P
x<-log(x)
y<-soil$yield
plot(x,y)
vals_ur<-matrix(NA,length(x),2) #Create a matrix with x and y as required by the bag plot function
vals_ur[,1]<-x
vals_ur[,2]<-y
bag<-bagplot(vals_ur, ylim=c(0,20), show.whiskers =F,create.plot = TRUE) # run the bagplot function
legend("topright", c("bag","loop","outliers", "d.median"),
pch = c(15,15,16,8),col=c("blue","lightblue","red","red"),
cex=0.7)
vals<-rbind(bag$pxy.bag,bag$pxy.outer)
x<-vals[,1]
y<-vals[,2]
# Custom 3 parameter function
beef<-function(x,a,b,c){
return(min(a,b+c*x))
}
vals<-data.frame(x,y)
theta2<-c(13.3, 4.75, 3.23, mean(x), mean(y), sd(x) , sd(y), cor(x,y))
cbvn(vals, equation=beef, theta=theta2, model="other", sigh=0.7)
devtools::load_all(".")
cbvn(vals, equation=beef, theta=theta2, model="other", sigh=0.7)
devtools::load_all(".")
beef2<-function(x,a,b,c,d,e){
return(min(a,b+c*x,d+e*x))
}
vals<-data.frame(x,y)
theta2<-c(13.3, 4.75, 3.23, 24.87,-2.95, mean(x), mean(y), sd(x) , sd(y), cor(x,y))
cbvn(vals, equation=beef2, theta=theta2, model="other", sigh=0.7)
vals<-data.frame(x,y)
devtools::load_all(".")
vals<-data.frame(x,y)
theta2<-c(4.75, 3.23, 13.3, mean(x), mean(y), sd(x) , sd(y), cor(x,y))
cbvn(vals, theta=theta2, mode="lp", sigh=0.7)
theta2<-c(4.75, 3.23, 13.3, 24.87,-2.95, mean(x), mean(y), sd(x) , sd(y), cor(x,y))
cbvn(vals, theta=theta2, mode="trapezium", sigh=0.7)
devtools::load_all(".")
theta2<-c(4.75, 3.23, 13.3, 24.87,-2.95, mean(x), mean(y), sd(x) , sd(y), cor(x,y))
cbvn(vals, theta=theta2, mode="trapezium", sigh=0.7)
devtools::load_all(".")
devtools::load_all(".")
vals<-data.frame(x,y)
theta2<-c(4.75, 3.23, 13.3, mean(x), mean(y), sd(x) , sd(y), cor(x,y))
ble_profile(vals,sigh=c(0.6,0.7),theta=theta2,model="lp")
ble_profile(vals,sigh=c(0.6,0.7),theta=theta2,model="lp")
devtools::load_all(".")
ble_profile(vals,sigh=c(0.6,0.7),theta=theta2,model="lp")
devtools::load_all(".")
# Custom 3 parameter function
beef<-function(x,a,b,c){
return(min(a,b+c*x))
}
vals<-data.frame(x,y)
theta2<-c(13.3, 4.75, 3.23, mean(x), mean(y), sd(x) , sd(y), cor(x,y))
ble_profile(vals,sigh=c(0.6),theta=theta2,model="other",equation=beef)
(10-0.0001)/0.0001
plot(10,10)
devtools::load_all(".")
startValues("logistic",7)
plot(100,100)
v<-locator(7)
x<-v$x
x
y<-v$y
y<-v$y
y
xx<- c(59.92190,  65.32222,  75.22281,  94.12394, 107.11042, 122.53991, 133.85487)
yy<- c(58.53450, 65.06353, 75.53462, 96.23041, 98.94057, 99.92609, 99.06376)
points(xx,yy)
# Define the Schmidt function
schmidt <- function(x, a, b, c) {
y <- a + b * (x - c)^2
return(y)
}
# Objective function to minimize - sum of squared differences between observed and predicted values
objective <- function(params, x, y) {
a <- params[1]
b <- params[2]
c <- params[3]
predicted <- schmidt(x, a, b, c)
error <- sum((y - predicted)^2)
return(error)
}
# Initial parameter values
initial_params <- c(1, 1, 100)
# Optimize the objective function
result <- optim(par = initial_params, fn = objective, x = x, y = y)
# Estimated parameters
estimated_params <- result$par
estimated_params
ypred<-schmidt(xx, 59.632264282,  0.002955867,  5.465979867)
lines(xx,ypred)
ypred<-schmidt(xx, a=59.632264282,  b=0.002955867,  c=5.465979867)
lines(xx,ypred)
plot(100,100)
ypred<-schmidt(xx, a=59.632264282,  b=0.002955867,  c=5.465979867)
lines(xx,ypred)
# Initial parameter values
initial_params <- c(100, 1, 100)
# Optimize the objective function
result <- optim(par = initial_params, fn = objective, x = x, y = y)
# Estimated parameters
estimated_params <- result$par
estimated_params
plot(100,100)
ypred<-schmidt(xx, a=59.632264282,  b=0.002955867,  c=5.465979867)
ypred<-schmidt(xx, a=101.37937820,  b=-0.01269573,  c=118.48393297)
lines(xx,ypred)
ypred<-schmidt(seq(60,140,1), a=101.37937820,  b=-0.01269573,  c=118.48393297)
lines(xx,ypred)
plot(100,100)
ypred<-schmidt(seq(60,140,1), a=101.37937820,  b=-0.01269573,  c=118.48393297)
lines(seq(60,140,1),ypred)
points(xx,yy)
devtools::load_all(".")
startValues("blm")
startValues("logistic",8)
estimated_params
plot(10,0.5)
v<-locator(8)
x<-v$x
y<-v$y
points(x,y)
# Initial parameter values
initial_params <- c(0.5, 1, 11)
# Optimize the objective function
result <- optim(par = initial_params, fn = objective, x = x, y = y)
# Estimated parameters
estimated_params <- result$par
estimated_params
ypred<-schmidt(seq(1,14,0.1), estimated_params)
estimated_params
ypred<-schmidt(seq(1,14,0.1), estimated_params[1],estimated_params[2], estimated_params[3])
lines(seq(1,14,0.1),ypred)
startValues("logistic",8)
estimated_params
plot(0.5,10)
v<-locator(8)
x<-v$x
y<-v$y
points(x,y)
# Initial parameter values
initial_params <- c(10.5, 1, 0.6)
# Optimize the objective function
result <- optim(par = initial_params, fn = objective, x = x, y = y)
# Estimated parameters
estimated_params <- result$par
estimated_params
points(x,y, col="red")
plot(0.5,10)
v<-locator(8)
x<-v$x
y<-v$y
points(x,y, col="red")
# Initial parameter values
initial_params <- c(10.5, 1, 0.5)
# Optimize the objective function
result <- optim(par = initial_params, fn = objective, x = x, y = y)
# Estimated parameters
estimated_params <- result$par
estimated_params
ypred<-schmidt(seq(0.3,0.7,0.01), estimated_params[1],estimated_params[2], estimated_params[3])
lines(seq(0.3,0.7,0.01,ypred)
lines(seq(0.3,0.7,0.01),ypred)
plot(0.5,10)
v<-locator(8)
x<-v$x
y<-v$y
points(x,y, col="red")
# Initial parameter values
initial_params <- c(10.5, 0.2, 0.5)
# Optimize the objective function
result <- optim(par = initial_params, fn = objective, x = x, y = y)
# Estimated parameters
estimated_params <- result$par
estimated_params
ypred<-schmidt(seq(0.3,0.7,0.01), estimated_params[1],estimated_params[2], estimated_params[3])
lines(seq(0.3,0.7,0.01),ypred)
startValues("logistic",8)
estimated_params
startValues("blm")
startValues("blm")
estimated_para
estimated_params
schmidt(0, estimated_params[1],estimated_params[2], estimated_params[3])
# Initial parameter values
initial_params <- c(10.5, -10, 0.5)
# Optimize the objective function
result <- optim(par = initial_params, fn = objective, x = x, y = y)
# Estimated parameters
estimated_params <- result$par
estimated_params
# Initial parameter values
initial_params <- c(10.5, -110, 0.5)
# Optimize the objective function
result <- optim(par = initial_params, fn = objective, x = x, y = y)
# Estimated parameters
estimated_params <- result$par
estimated_params
plot(50,0.8)
v<-locator(8)
x<-v$x
y<-v$y
points(x,y, col="red")
# Initial parameter values
initial_params <- c(0.8, -110, 50)
# Optimize the objective function
result <- optim(par = initial_params, fn = objective, x = x, y = y)
# Estimated parameters
estimated_params <- result$par
estimated_params
ypred<-schmidt(seq(30,70,1), estimated_params[1],estimated_params[2], estimated_params[3])
lines(seq(0.3,0.7,0.01),ypred)
lines(seq(30,70,1),ypred)
# Initial parameter values
initial_params <- c(0.8, -110, 50)
# Optimize the objective function
result <- optim(par = initial_params, fn = objective, x = x, y = y)
# Estimated parameters
estimated_params <- result$par
estimated_params
ypred<-schmidt(seq(30,70,1), estimated_params[1],estimated_params[2], estimated_params[3])
lines(seq(30,70,1),ypred)
x<-v$x
y<-v$y
points(x,y, col="red")
# Initial parameter values
initial_params <- c(0.8, 0, 50)
# Optimize the objective function
result <- optim(par = initial_params, fn = objective, x = x, y = y)
# Estimated parameters
estimated_params <- result$par
estimated_params
ypred<-schmidt(seq(30,70,1), estimated_params[1],estimated_params[2], estimated_params[3])
lines(seq(30,70,1),ypred)
startValues("logistic",8)
estimated_params
startValues("blm")
startValues("blm")
plot(500,18)
v<-locator(8)
x<-v$x
y<-v$y
points(x,y, col="red")
startValues("blm")
# Initial parameter values
initial_params <- c(19, -10, 500)
# Optimize the objective function
result <- optim(par = initial_params, fn = objective, x = x, y = y)
lines(seq(300,700,1),ypred)
# Estimated parameters
estimated_params <- result$par
estimated_params
ypred<-schmidt(seq(300,700,10), estimated_params[1],estimated_params[2], estimated_params[3])
lines(seq(300,700,1),ypred)
lines(seq(300,700,10),ypred)
plot(500,18)
x<-v$x
y<-v$y
points(x,y, col="red")
# Initial parameter values
initial_params <- c(19, -10, 500)
# Optimize the objective function
result <- optim(par = initial_params, fn = objective, x = x, y = y)
# Estimated parameters
estimated_params <- result$par
estimated_params
ypred<-schmidt(seq(300,700,10), estimated_params[1],estimated_params[2], estimated_params[3])
lines(seq(300,700,10),ypred)
# Initial parameter values
initial_params <- c(19, 0, 500)
# Optimize the objective function
result <- optim(par = initial_params, fn = objective, x = x, y = y)
# Estimated parameters
estimated_params <- result$par
estimated_params
ypred<-schmidt(seq(300,700,10), estimated_params[1],estimated_params[2], estimated_params[3])
lines(seq(300,700,10),ypred)
startValues("logistic",8)
startValues("blm")
startValues("blm")
# Initial parameter values
initial_params <- c(19, -10, 500)
# Optimize the objective function
result <- optim(par = initial_params, fn = objective, x = x, y = y)
# Estimated parameters
estimated_params <- result$par
estimated_params
ypred<-schmidt(seq(300,700,10), estimated_params[1],estimated_params[2], estimated_params[3])
lines(seq(300,700,10),ypred)
plot(500,18)
lines(seq(300,700,10),ypred)
# Initial parameter values
initial_params <- c(19, -0.10, 500)
# Optimize the objective function
result <- optim(par = initial_params, fn = objective, x = x, y = y)
# Estimated parameters
estimated_params <- result$par
estimated_params
ypred<-schmidt(seq(300,700,10), estimated_params[1],estimated_params[2], estimated_params[3])
lines(seq(300,700,10),ypred)
plot(500,18)
lines(seq(300,700,10), schmidt(seq(300,700,10), estimated_params[1],0.1, estimated_params[3]))
lines(seq(300,700,10), schmidt(seq(300,700,10), estimated_params[1],-0.1, estimated_params[3]))
# Initial parameter values
initial_params <- c(19, -0.10, 500)
# Optimize the objective function
result <- optim(par = initial_params, fn = objective, x = x, y = y)
# Estimated parameters
estimated_params <- result$par
estimated_params
ypred<-schmidt(seq(300,700,10), estimated_params[1],estimated_params[2], estimated_params[3])
lines(seq(300,700,10),ypred)
estimated_params[1]
estimated_params[3]
lines(seq(300,700,10), schmidt(seq(300,700,10), estimated_params[1],-0.0001, estimated_params[3]))
plot(500,18)
lines(seq(300,700,10), schmidt(seq(300,700,10), estimated_params[1],-0.0001, estimated_params[3]))
lines(seq(300,700,10), schmidt(seq(300,700,10), estimated_params[1],-0.00000001, estimated_params[3]))
lines(seq(300,700,10), schmidt(seq(300,700,10), estimated_params[1],-0.00001, estimated_params[3]))
lines(seq(300,700,10), schmidt(seq(300,700,10), estimated_params[1],-0.0001, estimated_params[3]))
lines(seq(300,700,10), schmidt(seq(300,700,10), estimated_params[1],-0.001, estimated_params[3]))
lines(seq(300,700,10), schmidt(seq(300,700,10), estimated_params[1],-0.0001, estimated_params[3]))
lines(seq(300,700,10), schmidt(seq(300,700,10), estimated_params[1],-0.00001, estimated_params[3]))
plot(500,18)
lines(seq(300,700,10), schmidt(seq(300,700,10), estimated_params[1],-0.00001, estimated_params[3]))
lines(seq(300,700,10), schmidt(seq(300,700,10), estimated_params[1],-0.000001, estimated_params[3]))
lines(seq(300,700,10), schmidt(seq(300,700,10), estimated_params[1],0.000001, estimated_params[3]))
lines(seq(300,700,10), schmidt(seq(300,700,10), estimated_params[1],0.0000001, estimated_params[3]))
lines(seq(300,700,10), schmidt(seq(300,700,10), estimated_params[1],0.0000000001, estimated_params[3]))
lines(seq(300,700,10), schmidt(seq(300,700,10), estimated_params[1],0.1, estimated_params[3]))
lines(seq(300,700,10), schmidt(seq(300,700,10), estimated_params[1],1, estimated_params[3]))
lines(seq(300,700,10), schmidt(seq(300,700,10), estimated_params[1],100, estimated_params[3]))
lines(seq(300,700,10), schmidt(seq(300,700,10), estimated_params[1],-1, estimated_params[3]))
lines(seq(300,700,10), schmidt(seq(300,700,10), estimated_params[1],-0.1, estimated_params[3]))
lines(seq(300,700,10), schmidt(seq(300,700,10), estimated_params[1],-0.001, estimated_params[3]))
lines(seq(300,700,10), schmidt(seq(300,700,10), estimated_params[1],-0.0001, estimated_params[3]))
startValues("logistic",8)
plot(500,18)
lines(seq(300,700,10), schmidt(seq(300,700,10), estimated_params[1],-0.0001, estimated_params[3]))
startValues("logistic",8)
plot(500,18)
v<-locator(8)
x<-v$x
y<-v$y
points(x,y, col="red")
# Initial parameter values
initial_params <- c(21, -0.10, 550)
# Optimize the objective function
result <- optim(par = initial_params, fn = objective, x = x, y = y)
# Estimated parameters
estimated_params <- result$par
estimated_params
ypred<-schmidt(seq(300,700,10), estimated_params[1],estimated_params[2], estimated_params[3])
lines(seq(300,700,10),ypred)
plot(0.500,18)
v<-locator(8)
x<-v$x
y<-v$y
points(x,y, col="red")
# Initial parameter values
initial_params <- c(21, -0.10, 5.50)
# Optimize the objective function
result <- optim(par = initial_params, fn = objective, x = x, y = y)
# Estimated parameters
estimated_params <- result$par
estimated_params
ypred<-schmidt(seq(0.300,0.700,0.010), estimated_params[1],estimated_params[2], estimated_params[3])
lines(seq(0.300,0.700,0.010),ypred)
# Initial parameter values
initial_params <- c(21,0, 5.50)
# Optimize the objective function
result <- optim(par = initial_params, fn = objective, x = x, y = y)
# Estimated parameters
estimated_params <- result$par
estimated_params
ypred<-schmidt(seq(0.300,0.700,0.010), estimated_params[1],estimated_params[2], estimated_params[3])
lines(seq(0.300,0.700,0.010),ypred)
startValues("logistic",8)
plot(0.500,18)
points(x,y, col="red")
# Initial parameter values
initial_params <- c(20,0, 0.50)
# Optimize the objective function
result <- optim(par = initial_params, fn = objective, x = x, y = y)
# Estimated parameters
estimated_params <- result$par
estimated_params
ypred<-schmidt(seq(0.300,0.700,0.010), estimated_params[1],estimated_params[2], estimated_params[3])
lines(seq(0.300,0.700,0.010),ypred)
startValues("logistic",8)
estimated_param
estimated_params
startValues("blm")
#usethis::use_readme_rmd() # creates a readme file
devtools::build_readme()
#usethis::use_pkgdown()
pkgdown::build_site() # to build the site
# Define the Schmidt function
mitcherlich <- function(x, a, b, c) {
y <- a + b * (1 - exp(-x/c))^2
return(y)
}
# Objective function to minimize - sum of squared differences between observed and predicted values
objective <- function(params, x, y) {
a <- params[1]
b <- params[2]
c <- params[3]
predicted <- mitcherlich (x, a, b, c)
error <- sum((y - predicted)^2)
return(error)
}
# Initial parameter values
initial_params <- c(20,0, 0.50)
# Optimize the objective function
result <- optim(par = initial_params, fn = objective, x = x, y = y)
plot(0.500,18)
v<-locator(8)
x<-v$x
y<-v$y
points(x,y, col="red")
v<-locator(8)
x<-v$x
y<-v$y
points(x,y, col="red")
v<-locator(8)
x<-v$x
y<-v$y
points(x,y, col="red")
v<-locator(8)
x<-v$x
y<-v$y
points(x,y, col="red")
v<-locator(8)
x<-v$x
y<-v$y
points(x,y, col="red")
#usethis::use_readme_rmd() # creates a readme file
devtools::build_readme()
#usethis::use_readme_rmd() # creates a readme file
devtools::build_readme()
